#!/bin/bash
# author: Lukas Kluft
# version: 13.10.2014 
#
# purpose: update jEdit's ARTS syntax highlighting

# path to ARTS executable. This variable has to be set in order to run run the script
# e.g. arts="$HOME/arts/build/src/arts"

if [[ $# -lt 1 ]]; then
    echo "ERROR: arts not found"
    echo "Usage: $0 [PATH_TO_ARTS_BINARY]"
    exit 1
fi

ARTS_BIN=$1

# create subdirectories in ~/Library(/jEdit
mkdir -p $HOME/Library/jEdit/modes

# path to vim syntax file
f="$HOME/Library/jEdit/modes/arts.xml"
c="$HOME/Library/jEdit/modes/catalog"

# enable file extension for auto recognition
if [[ $(grep '<MODE NAME="ARTS" FILE="arts.xml"' $c) ]];then
	echo $c beinhaltet bereits einen Verweis aus $f
else
	gsed -i 's\</MODES>\<MODE NAME="ARTS" FILE="arts.xml" FILE_NAME_GLOB="*.{arts,ARTS}"/>\g' $c
	echo -e '\n</MODES>' >> $c
	echo Verweis auf $f in $c erstellt.
fi

# creat syntax-xml-file

cat << 'EOF' > $f
<?xml version="1.0"?>
<!DOCTYPE MODE SYSTEM "xmode.dtd">

<MODE>
        <PROPS>
                <PROPERTY NAME="indentOpenBrackets" VALUE="{"/>
                <PROPERTY NAME="indentCloseBrackets" VALUE="}"/>
                <PROPERTY NAME="unalignedOpenBrackets" VALUE="("/>
                <PROPERTY NAME="unalignedCloseBrackets" VALUE=")"/>
                <PROPERTY NAME="lineUpClosingBracket" VALUE="true"/>
                <PROPERTY NAME="commentStart" VALUE="=begin"/>
                <PROPERTY NAME="commentEnd" VALUE="=end"/>
                <PROPERTY NAME="lineComment" VALUE="#"/>
                <PROPERTY NAME="indentNextLines"
                          VALUE="[^#]*\s+do(\s*|(\s+\|.+\|\s*))|\s*(if\s+.*|elsif.*|else.*|do(\s*|\s+.*)|case\s+.*|when\s+.*|while\s+.*|for\s+.*|until\s+.*|loop\s+.*|def\s+.*|class\s+.*|module\s+.*|begin.*|unless\s+.*|rescue.*|ensure.*)+"/>
                <PROPERTY NAME="unindentThisLine" VALUE="^\s*(else.*|end\s*|elsif.*|rescue.*|when.*|ensure.*)$"/>
                <PROPERTY NAME="unindentNextLines" VALUE="^\s*(end\s*|else.*|rescue.*|elsif.*|when.*|ensure.*)$"/>
                <PROPERTY NAME="indentNextLine"
                          VALUE="^[^#]*([^$](:|\+|~|\*|-|%|&lt;|&gt;|&amp;|\^|\.|=)|\s(/|\!|\?|\|)|\b(not|and|or)|\\)\s*$"/>
                <PROPERTY NAME="electricKeys" VALUE="edfn"/>
        </PROPS>
        <RULES IGNORE_CASE="FALSE" HIGHLIGHT_DIGITS="TRUE"
               DIGIT_RE="(0b[01]([01_]*[01])?)|(0x[\p{XDigit}]([\p{XDigit}_]*[\p{XDigit}])?)|(0([0-7_]*[0-7])?)|(0d[0-9]([0-9_]*[0-9])?)|([1-9]([0-9_]*[0-9])?)|([0-9]([0-9_]*[0-9])?[Ee]([0-9]([0-9_]*[0-9])?)?)">
                <!--       ^ Binary literal    | ^ Hex literal                               | ^ Octal literal  | ^ "0d" Style Dec lit   | ^ Normal Dec literal | ^ Float literal w/out dec point, with exp. -->

                <!-- Ruby comment (Inline Documentation ) -->
                <SPAN TYPE="COMMENT2">
                        <BEGIN>=begin</BEGIN>
                        <END AT_LINE_START="TRUE">=end</END>
                </SPAN>

                <!-- Class and instance vars -->
                <MARK_FOLLOWING TYPE="KEYWORD4">@</MARK_FOLLOWING>

                <!-- Method, class and modules names -->
                <MARK_FOLLOWING TYPE="FUNCTION" MATCH_TYPE="KEYWORD1">\bdef\b</MARK_FOLLOWING>
                <MARK_FOLLOWING TYPE="FUNCTION" MATCH_TYPE="KEYWORD1">\bundef\b</MARK_FOLLOWING>
                <MARK_FOLLOWING TYPE="FUNCTION" MATCH_TYPE="KEYWORD1">\bclass\b</MARK_FOLLOWING>
                <MARK_FOLLOWING TYPE="FUNCTION" MATCH_TYPE="KEYWORD1">\bmodule\b</MARK_FOLLOWING>

                <!-- String literals -->
                <SPAN TYPE="LITERAL1" DELEGATE="doubleQuoteLiteral">
                        <BEGIN>"</BEGIN>
                        <END>"</END>
                </SPAN>

                <SPAN TYPE="LITERAL1" ESCAPE="\">
                        <BEGIN>'</BEGIN>
                        <END>'</END>
                </SPAN>

                <!-- %Q(Hello world) %(Hello world)-->
                <SPAN_REGEXP HASH_CHAR="%" TYPE="LITERAL1" DELEGATE="doubleQuoteLiteral">
                        <BEGIN>%Q?\(</BEGIN>
                        <END>)</END>
                </SPAN_REGEXP>

                <!-- %q(Hello world) -->
                <SPAN TYPE="LITERAL1" ESCAPE="\">
                        <BEGIN>%q(</BEGIN>
                        <END>)</END>
                </SPAN>

                <!-- %Q{Hello world} %{Hello world} -->
                <SPAN_REGEXP HASH_CHAR="%" TYPE="LITERAL1" DELEGATE="doubleQuoteLiteral">
                        <BEGIN>%Q?\{</BEGIN>
                        <END>}</END>
                </SPAN_REGEXP>

                <!-- %q{Hello world} -->
                <SPAN TYPE="LITERAL1" ESCAPE="\">
                        <BEGIN>%q{</BEGIN>
                        <END>}</END>
                </SPAN>

                <!-- %Q[Hello world] %[Hello world] -->
                <SPAN_REGEXP HASH_CHAR="%" TYPE="LITERAL1" DELEGATE="doubleQuoteLiteral">
                        <BEGIN>%Q?\[</BEGIN>
                        <END>]</END>
                </SPAN_REGEXP>

                <!-- %q[Hello world] -->
                <SPAN TYPE="LITERAL1" ESCAPE="\">
                        <BEGIN>%q[</BEGIN>
                        <END>]</END>
                </SPAN>

                <!-- %Q<Hello world> %<Hello world> -->
                <SPAN_REGEXP HASH_CHAR="%" TYPE="LITERAL1" DELEGATE="doubleQuoteLiteral">
                        <BEGIN>%Q?&lt;</BEGIN>
                        <END>&gt;</END>
                </SPAN_REGEXP>

                <!-- %q<Hello world> -->
                <SPAN TYPE="LITERAL1" ESCAPE="\">
                        <BEGIN>%q&lt;</BEGIN>
                        <END>&gt;</END>
                </SPAN>

                <!-- I made the next three forms as three instead of two, because the
                         first two actually support whitespace as a delimiter, and the third
                         one doesn't. -->
                <!-- %Q$Hello world$ -->
                <SPAN_REGEXP HASH_CHAR="%Q" TYPE="LITERAL1" DELEGATE="doubleQuoteLiteral">
                        <BEGIN>%Q([^\p{Alnum}])</BEGIN>
                        <END>$1</END>
                </SPAN_REGEXP>

                <!-- %q$Hello world$ -->
                <SPAN_REGEXP HASH_CHAR="%q" TYPE="LITERAL1" ESCAPE="\">
                        <BEGIN>%q([^\p{Alnum}])</BEGIN>
                        <END>$1</END>
                </SPAN_REGEXP>

                <!-- %$Hello world$ -->
                <SPAN_REGEXP HASH_CHAR="%" TYPE="LITERAL1" DELEGATE="doubleQuoteLiteral">
                        <BEGIN>%([^\p{Alnum}\p{Space}])</BEGIN>
                        <END>$1</END>
                </SPAN_REGEXP>

                <!-- %W(Array of strings) -->
                <SPAN TYPE="LITERAL1" DELEGATE="doubleQuoteLiteral">
                        <BEGIN>%W(</BEGIN>
                        <END>)</END>
                </SPAN>

                <!-- %w(Array of strings) -->
                <SPAN TYPE="LITERAL1" ESCAPE="\">
                        <BEGIN>%w(</BEGIN>
                        <END>)</END>
                </SPAN>

                <!-- %W{Array of strings} -->
                <SPAN TYPE="LITERAL1" DELEGATE="doubleQuoteLiteral">
                        <BEGIN>%W{</BEGIN>
                        <END>}</END>
                </SPAN>

                <!-- %w{Array of strings} -->
                <SPAN TYPE="LITERAL1" ESCAPE="\">
                        <BEGIN>%w{</BEGIN>
                        <END>}</END>
                </SPAN>

                <!-- %W[Array of strings] -->
                <SPAN TYPE="LITERAL1" DELEGATE="doubleQuoteLiteral">
                        <BEGIN>%W[</BEGIN>
                        <END>]</END>
                </SPAN>

                <!-- %w[Array of strings] -->
                <SPAN TYPE="LITERAL1" ESCAPE="\">
                        <BEGIN>%w[</BEGIN>
                        <END>]</END>
                </SPAN>

                <!-- %W<Array of strings>  -->
                <SPAN TYPE="LITERAL1" DELEGATE="doubleQuoteLiteral">
                        <BEGIN>%W&lt;</BEGIN>
                        <END>&gt;</END>
                </SPAN>

                <!-- %w<Array of strings> -->
                <SPAN TYPE="LITERAL1" ESCAPE="\">
                        <BEGIN>%w&lt;</BEGIN>
                        <END>&gt;</END>
                </SPAN>

                <!-- %W$Array of strings$ -->
                <SPAN_REGEXP HASH_CHAR="%W" TYPE="LITERAL1" DELEGATE="doubleQuoteLiteral">
                        <BEGIN>%W([^\p{Alnum}\p{Space}])</BEGIN>
                        <END>$1</END>
                </SPAN_REGEXP>

                <!-- %w@Array of strings@ -->
                <SPAN_REGEXP HASH_CHAR="%w" TYPE="LITERAL1" ESCAPE="\">
                        <BEGIN>%w([^\p{Alnum}\p{Space}])</BEGIN>
                        <END>$1</END>
                </SPAN_REGEXP>

                <!-- Here documents <<"FOO" <<-"FOO" -->
                <!-- Unfortunately, in a SPAN_REGEXP element only the <BEGIN> tag takes
                         a regex, not the <END> tag. So an instance of FOO anywhere in the here
                         document will terminate highlighting; I couldn't make it smarter. -->
                <SPAN_REGEXP HASH_CHAR="&lt;&lt;" TYPE="LITERAL1" DELEGATE="doubleQuoteLiteral">
                        <BEGIN>&lt;&lt;-?"([\p{Graph}]+)"</BEGIN>
                        <END REGEXP="TRUE">^\S*$1$</END>
                </SPAN_REGEXP>

                <!-- Here documents <<'FOO' <<-'FOO' -->
                <!-- Unfortunately, in a SPAN_REGEXP element only the <BEGIN> tag takes
                         a regex, not the <END> tag. So an instance of FOO anywhere in the here
                         document will terminate highlighting; I couldn't make it smarter. -->
                <SPAN_REGEXP HASH_CHAR="&lt;&lt;" TYPE="LITERAL1">
                        <BEGIN>&lt;&lt;-?'([\p{Graph}]+)'</BEGIN>
                        <END REGEXP="TRUE">^\S*$1$</END>
                </SPAN_REGEXP>

                <!-- Here documents <<FOO <<-FOO -->
                <!-- Unfortunately, in a SPAN_REGEXP element only the <BEGIN> tag takes
                         a regex, not the <END> tag. So an instance of FOO anywhere in the here
                         document will terminate highlighting; I couldn't make it smarter. -->
                <SPAN_REGEXP HASH_CHAR="&lt;&lt;" TYPE="LITERAL1" DELEGATE="doubleQuoteLiteral">
                        <BEGIN>&lt;&lt;-?([A-Za-z_]+)</BEGIN>
                        <END REGEXP="TRUE">^\S*$1$</END>
                </SPAN_REGEXP>

                <!-- Shell command strings -->

                <!-- `echo foo` -->
                <SPAN TYPE="LITERAL2" DELEGATE="BackquoteLiteral">
                        <BEGIN>`</BEGIN>
                        <END>`</END>
                </SPAN>

                <!-- %x(echo foo) -->
                <SPAN TYPE="LITERAL2" DELEGATE="BackquoteLiteral">
                        <BEGIN>%x(</BEGIN>
                        <END>)</END>
                </SPAN>

                <!-- %x{echo foo} -->
                <SPAN TYPE="LITERAL2" DELEGATE="BackquoteLiteral">
                        <BEGIN>%x{</BEGIN>
                        <END>}</END>
                </SPAN>

                <!-- %x[echo foo] -->
                <SPAN TYPE="LITERAL2" DELEGATE="BackquoteLiteral">
                        <BEGIN>%x[</BEGIN>
                        <END>]</END>
                </SPAN>

                <!-- %x<echo foo> -->
                <SPAN TYPE="LITERAL2" DELEGATE="BackquoteLiteral">
                        <BEGIN>%x&lt;</BEGIN>
                        <END>&gt;</END>
                </SPAN>

                <!-- %x$echo foo$ -->
                <SPAN_REGEXP HASH_CHAR="%x" TYPE="LITERAL2" DELEGATE="BackquoteLiteral">
                        <BEGIN>%x([^\p{Alnum}\p{Space}])</BEGIN>
                        <END>$1</END>
                </SPAN_REGEXP>

                <!-- Regular expressions -->

                <!-- /regexp?/ -->
                <!-- If a regexp begins with a whitespace (including a newline),
                            the beginning "/" is wrongly treated as a division operator.
                            But such regexp is rare enough and one can use %r notations
                            or write like "/\ ..." to force jEdit to treat it as a
                            regexp. -->
                <SEQ_REGEXP HASH_CHAR="/" TYPE="OPERATOR">/=?($|\s)</SEQ_REGEXP>
                <!-- AT_WORD_START is TRUE not to handle "a/b/c". -->
                <SPAN AT_WORD_START="TRUE" TYPE="LITERAL3" DELEGATE="RegexpLiteral">
                        <BEGIN>/</BEGIN>
                        <END>/</END>
                </SPAN>

                <!-- %r(regexp?) -->
                <SPAN TYPE="LITERAL3" DELEGATE="RegexpLiteral">
                        <BEGIN>%r(</BEGIN>
                        <END>)</END>
                </SPAN>

                <!-- %r{regexp?} -->
                <SPAN TYPE="LITERAL3" DELEGATE="RegexpLiteral">
                        <BEGIN>%r{</BEGIN>
                        <END>}</END>
                </SPAN>

                <!-- %r[regexp?] -->
                <SPAN TYPE="LITERAL3" DELEGATE="RegexpLiteral">
                        <BEGIN>%r[</BEGIN>
                        <END>]</END>
                </SPAN>

                <!-- %r<regexp?> -->
                <SPAN TYPE="LITERAL3" DELEGATE="RegexpLiteral">
                        <BEGIN>%r&lt;</BEGIN>
                        <END>&gt;</END>
                </SPAN>

                <!-- %r$regexp?$ -->
                <SPAN_REGEXP HASH_CHAR="%r" TYPE="LITERAL3" DELEGATE="RegexpLiteral">
                        <BEGIN>%r([^\p{Alnum}\p{Space}])</BEGIN>
                        <END>$1</END>
                </SPAN_REGEXP>

                <!-- Std Comment -->
                <EOL_SPAN TYPE="COMMENT1">#</EOL_SPAN>

                <!-- Predefined global variables -->
                <SEQ_REGEXP HASH_CHAR="$-" TYPE="KEYWORD3" AT_WORD_START="TRUE">\$-[0adFiIKlpvw](?![\p{Alnum}_])
                </SEQ_REGEXP>

                <SEQ_REGEXP HASH_CHAR="$" TYPE="KEYWORD3" AT_WORD_START="TRUE">\$[0-9!@&amp;\+`'=~/\\,\.;&lt;&gt;_\*"\$\?\:F](?![\p{Alnum}_])</SEQ_REGEXP>

                <!-- Because of the ? char, this can't be done as a KEYWORD element -->
                <SEQ TYPE="KEYWORD1" AT_WORD_START="TRUE">defined?</SEQ>

                <!-- Highlight "include" but not "include?" -->
                <SEQ_REGEXP HASH_CHAR="include" TYPE="KEYWORD2" AT_WORD_START="TRUE">include(?![\p{Alnum}_\?])
                </SEQ_REGEXP>

                <!-- Not Operators but like the syntax highlight to match operators -->
                <SEQ TYPE="OPERATOR">{</SEQ>
                <SEQ TYPE="OPERATOR">}</SEQ>
                <SEQ TYPE="OPERATOR">(</SEQ>
                <SEQ TYPE="OPERATOR">)</SEQ>

                <!-- Arithmetic operators -->
                <SEQ TYPE="OPERATOR">::</SEQ>
                <SEQ TYPE="OPERATOR">===</SEQ>
                <SEQ TYPE="OPERATOR">=</SEQ>
                <SEQ TYPE="OPERATOR">&gt;&gt;</SEQ>
                <SEQ TYPE="OPERATOR">&lt;&lt;</SEQ>
                <SEQ TYPE="OPERATOR">&lt;=</SEQ>
                <SEQ TYPE="OPERATOR">+</SEQ>
                <SEQ TYPE="OPERATOR">-</SEQ>
                <SEQ TYPE="OPERATOR">/</SEQ>

                <SEQ TYPE="OPERATOR">**</SEQ>
                <SEQ TYPE="OPERATOR">*</SEQ>

                <SEQ TYPE="OPERATOR">%</SEQ>

                <!-- Logical Operators -->
                <SEQ TYPE="OPERATOR">&amp;</SEQ>
                <SEQ TYPE="OPERATOR">|</SEQ>
                <SEQ TYPE="OPERATOR">!</SEQ>
                <SEQ TYPE="OPERATOR">&gt;</SEQ>
                <SEQ TYPE="OPERATOR">&lt;</SEQ>
                <SEQ TYPE="OPERATOR">^</SEQ>
                <SEQ TYPE="OPERATOR">~</SEQ>

                <!-- Range operators -->
                <SEQ TYPE="OPERATOR">...</SEQ>
                <SEQ TYPE="OPERATOR">..</SEQ>

                <SEQ TYPE="OPERATOR">]</SEQ>
                <SEQ TYPE="OPERATOR">[</SEQ>
                <SEQ TYPE="OPERATOR">?</SEQ>

                <!-- Symbols -->
                <SEQ_REGEXP AT_WORD_START="TRUE" HASH_CHAR=":" TYPE="LITERAL4">:[\p{Alpha}_][\p{Alnum}_]*[?]?</SEQ_REGEXP>
                <SPAN AT_WORD_START="TRUE" TYPE="LITERAL4">
                  <BEGIN>:'</BEGIN> <END>'</END>
                </SPAN>
                <!-- bang = '!'
                     :"hello world#{bang}" -->
                <SPAN AT_WORD_START="TRUE" TYPE="LITERAL4" DELEGATE="doubleQuoteSymbol">
                  <BEGIN>:"</BEGIN> <END>"</END>
                </SPAN>

                <!-- %s$Hello world$ -->
                <SPAN_REGEXP HASH_CHAR="%s" TYPE="LITERAL4">
                  <BEGIN>%s([^\p{Alnum}])</BEGIN>
                  <END>$1</END>
    </SPAN_REGEXP>
                <KEYWORDS>
EOF

ssh $(whoami)@thunder7 "$ARTS_BIN -p -m all" | gsed -e 's/^/\t\t\t<KEYWORD1>/g' -e 's\$\</KEYWORD1>\g' >> $f
ssh $(whoami)@thunder7 "$ARTS_BIN -p -w all" | gsed -e 's/^/\t\t\t<KEYWORD2>/g' -e 's\$\</KEYWORD2>\g' >> $f
ssh $(whoami)@thunder7 "$ARTS_BIN -p -g all" | gsed -e 's/^/\t\t\t<KEYWORD2>/g' -e 's\$\</KEYWORD2>\g' >> $f

cat << 'EOF' >> $f
				</KEYWORDS>
        </RULES>

        <!-- Delegate contents of #{} expression in double quotes to MAIN so that
             it will be syntax highlighted as well -->
        <RULES DEFAULT="LITERAL1" SET="doubleQuoteLiteral" ESCAPE="\">
                <SPAN DELEGATE="MAIN" TYPE="OPERATOR">
                        <BEGIN>#{</BEGIN>
                        <END>}</END>
                </SPAN>
                <MARK_FOLLOWING TYPE="KEYWORD4">#@@</MARK_FOLLOWING>
                <MARK_FOLLOWING TYPE="KEYWORD4">#@</MARK_FOLLOWING>
                <MARK_FOLLOWING TYPE="NULL">#$</MARK_FOLLOWING>
        </RULES>
        <!-- Delegate contents of #{} expression in a double quoted symbol to MAIN so that
             it will be syntax highlighted as well -->
        <RULES DEFAULT="LITERAL4" SET="doubleQuoteSymbol" ESCAPE="\">
      <SPAN DELEGATE="MAIN" TYPE="OPERATOR">
      <BEGIN>#{</BEGIN>
      <END>}</END>
    </SPAN>
    <MARK_FOLLOWING TYPE="KEYWORD4">#@@</MARK_FOLLOWING>
    <MARK_FOLLOWING TYPE="KEYWORD4">#@</MARK_FOLLOWING>
    <MARK_FOLLOWING TYPE="NULL">#$</MARK_FOLLOWING>
  </RULES>
                
        <!-- Delegate contents of #{} expression in backquotes to MAIN so that
             it will be syntax highlighted as well -->
        <RULES DEFAULT="LITERAL2" SET="BackquoteLiteral" ESCAPE="\">
                <SPAN DELEGATE="MAIN" TYPE="OPERATOR">
                        <BEGIN>#{</BEGIN>
                        <END>}</END>
                </SPAN>
                <MARK_FOLLOWING TYPE="KEYWORD4">#@@</MARK_FOLLOWING>
                <MARK_FOLLOWING TYPE="KEYWORD4">#@</MARK_FOLLOWING>
                <MARK_FOLLOWING TYPE="NULL">#$</MARK_FOLLOWING>
        </RULES>

        <!-- Delegate contents of #{} expression in a regexp to MAIN so that
             it will be syntax highlighted as well -->
        <RULES DEFAULT="LITERAL3" SET="RegexpLiteral" ESCAPE="\">
                <SPAN DELEGATE="MAIN" TYPE="OPERATOR">
                        <BEGIN>#{</BEGIN>
                        <END>}</END>
                </SPAN>
                <MARK_FOLLOWING TYPE="KEYWORD4">#@@</MARK_FOLLOWING>
                <MARK_FOLLOWING TYPE="KEYWORD4">#@</MARK_FOLLOWING>
                <MARK_FOLLOWING TYPE="NULL">#$</MARK_FOLLOWING>
        </RULES>
</MODE>
EOF

echo "Written $f"

exit 0
